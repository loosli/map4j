buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}



allprojects {

    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    version = '0.0.2'
    sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_7

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.12'

        println "---> ${project.name}"

        if (project.name != 'map4j-api') {
            compile project(':map4j-api')
        }

        testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
        testCompile "org.codehaus.groovy:groovy:2.4.6"
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                    'Implementation-Version': version
        }
    }

    publishing {
        publications {
            JavaPublication(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                groupId 'ch.silviowangler.map4j'
                artifactId project.name
                version project.version
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['JavaPublication']
        pkg {
            repo = 'releases'
            name = 'map4j'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/saw303/map4j.git'
            labels = ['orika', 'mapper', 'dozer']
            publicDownloadNumbers = true
            version {
                name = project.version
                desc = 'map4j'
                vcsTag = project.version
                released = new Date()
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava

        from("${rootProject.projectDir}") {
            include "LICENSE.txt"
            into "META-INF"
            expand(dateOfYear: new Date().format('yyyy'))
        }
    }

    artifacts {
        archives sourcesJar
    }

}

project('map4j-dozer') {

    dependencies {

        compile "net.sf.dozer:dozer:${dozerVersion}"

        testCompile project(':map4j-testutil')
    }
}

project('map4j-orika') {

    dependencies {

        compile("ma.glasnost.orika:orika-core:${orikaVersion}")

        testCompile project(':map4j-testutil')
    }
}

project('map4j-testutil') {

}
